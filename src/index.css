@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --animation-speed: 1000ms;
  --animation-speed-fast: 250ms;
  --default-cell-bg-color: theme('colors.red.700');
  --default-cell-border-color: theme('colors.black');
  --default-cell-text-color: theme('colors.black');
  --absent-cell-bg-color: theme('colors.zinc.500');
  --correct-cell-bg-color: theme('colors.blue.600');
  --present-cell-bg-color: theme('colors.amber.500');
}
/*yellow.300*/

.dark {
  --default-cell-bg-color: theme('colors.zinc.900');
  --default-cell-border-color: theme('colors.white');
  --default-cell-text-color: theme('colors.white');
  --absent-cell-bg-color: theme('colors.zinc.700');
}

.high-contrast {
  --correct-cell-bg-color: theme('colors.blue.500');
  --present-cell-bg-color: theme('colors.orange.400');
}

.cell-fill-animation {
  animation: onTypeCell linear;
  animation-duration: 0.15s;
}

.cell-reveal {
  animation-duration: 0.15s;
  animation-timing-function: linear;
  animation-fill-mode: backwards;
}
/* no flip
.cell-reveal.absent {
  animation-name: revealAbsentCharCell;
}

.cell-reveal.correct {
  animation-name: revealCorrectCharCell;
}

.cell-reveal.present {
  animation-name: revealPresentCharCell;
}

.cell-reveal > .letter-container {
  animation: offsetLetterFlip 0.35s linear;
  animation-fill-mode: backwards;
}
*/

svg.cursor-pointer {
  transition: all var(--animation-speed-fast);
}

svg.cursor-pointer:hover {
  transform: scale(1.2);
}
/*
.jiggle {
  animation: jiggle linear;
  animation-duration: var(--animation-speed-fast);
}
*/

/*added top margin*/
.navbar {
  margin-bottom: 2%;
  margin-top: 1%;
}

.navbar-content {
  display: flex;
  height: 3rem;
  align-items: center;
  justify-content: center;
  padding-top: 0.5rem;
}
/*added left padding*/
.right-icons {
  display: flex;
  padding-left: 2rem;
}

/* no flip
@keyframes revealAbsentCharCell {
  0% {
    transform: rotateX(0deg);
    background-color: var(--default-cell-bg-color);
    border-color: var(--default-cell-border-color);
    color: var(--default-cell-text-color);
  }
  50% {
    background-color: var(--default-cell-bg-color);
    border-color: var(--default-cell-border-color);
    color: var(--default-cell-text-color);
  }
  50.1% {
    background-color: var(--absent-cell-bg-color);
    border-color: var(--absent-cell-bg-color);
  }
  100% {
    transform: rotateX(180deg);
  }
}

@keyframes revealCorrectCharCell {
  0% {
    transform: rotateX(0deg);
    background-color: var(--default-cell-bg-color);
    border-color: var(--default-cell-border-color);
    color: var(--default-cell-text-color);
  }
  50% {
    background-color: var(--default-cell-bg-color);
    border-color: var(--default-cell-border-color);
    color: var(--default-cell-text-color);
  }
  50.1% {
    background-color: var(--correct-cell-bg-color);
    border-color: var(--correct-cell-bg-color);
  }
  100% {
    transform: rotateX(180deg);
  }
}

@keyframes revealPresentCharCell {
  0% {
    transform: rotateX(0deg);
    background-color: var(--default-cell-bg-color);
    border-color: var(--default-cell-border-color);
    color: var(--default-cell-text-color);
  }
  50% {
    background-color: var(--default-cell-bg-color);
    border-color: var(--default-cell-border-color);
    color: var(--default-cell-text-color);
  }
  50.1% {
    background-color: var(--present-cell-bg-color);
    border-color: var(--present-cell-bg-color);
  }
  100% {
    transform: rotateX(180deg);
  }
}
*/

/* Additional animation on the child div to avoid letters turning upside down/snapping back to upright visual glitch
removed
@keyframes offsetLetterFlip {
  0% {
    transform: rotateX(0deg);
  }
  100% {
    transform: rotateX(180deg);
  }
}
*/

/*little zoom in and out when typing*/
@keyframes onTypeCell {
  0% {
    transform: scale(1);
  }
  0% {
    transform: scale(1.015);
  }
  50% {
    transform: scale(1.025);
  }
  0% {
    transform: scale(1.015);
  }
  100% {
    transform: scale(1);
  }
}
/*
.shadowed {
  text-shadow: 1px 1px 1px #000000;
}

@keyframes jiggle {
  0% {
    transform: translate(0, 0);
  }
  25% {
    transform: translate(-0.5rem, 0);
  }
  50% {
    transform: translate(0.5rem, 0);
  }
  75% {
    transform: translate(-0.5rem, 0);
  }
  100% {
    transform: translate(0, 0);
  }
}
*/
